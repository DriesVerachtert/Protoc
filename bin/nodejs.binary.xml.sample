<snippets>
	<!--
		Added before content
		Variables:
			$ns$ - namespace
	-->
	<Header>
		<![CDATA[
/**
* Automaticaly generated file for $ns$
*/
	]]>
	</Header>

	<!--
		Added after content
		Variables:
			$ns$ - namespace
	-->
	<Footer>
		<![CDATA[
/**
* End of generated file for $ns$
*/
]]>
	</Footer>

	<!--
		Default values for each type
		If not specified default value is empty string
	-->
	<Default type="int">0</Default>
	<Default type="string"></Default>
	<Default type="binary">null</Default>

	<!--
		Separates packet definitions.
	-->
	<PackSeparator/>

	<!--
		Root namespace definition
		Variables:
			$ns$ - full namespace name
			$name$ - root namespace name
			$content$ - namespace content (nested namespaces or packet definitions)
	-->
	<NSRoot>
		<![CDATA[
var $name$ = {};
module.exports = $name$;
$content$
]]>
	</NSRoot>

	<!--
		Nested namespace definition
		Variables:
			$ns$ - full namespace name
			$name$ - namespace name
			$content$ - namespace content (nested namespaces or packet definitions)
	-->
	<NSNext>
		<![CDATA[
$parent$.$name$ = {};
$content$
]]>
	</NSNext>

	<!--
		Packet definitions
		Variables:
			$ns$ - namespace
			$name$ - packet name
			$id$ - packet id
			$parent$ - parent packet name
			$fields$ - fields format definition (see <Field><Format/></Field> definitions)
			$serializer$ - serializer definition (see <Serializer/>)
			$deserializer$ - deserializer definition (see <Deserializer/>)
			$size$ - size definition (see <Size/>)
			$ctor$ - constructor definition (if available for destination language)
	-->
	<Pack>
		<![CDATA[
$ns$.$name$ = function() {
	$fields$
	this.encode = $serializer$
	this.decode = $deserializer$
	this.Size = $size$
	return this;
};
]]>
	</Pack>

	<!--
		Packet size definition
		Variables:
			$ns$ - namespace
			$id$ - packet id
			$name$ - packet name
			$parent$ - parent packet name
			$fields$ - field size definition summ (see <Pack><size/></Pack>)
	-->
	<Size>
		<![CDATA[
	function() { return 1 + $fields$; };
]]>
	</Size>

	<!--
		Packet constructor definition
		Variables:
			$ns$ - namespace
			$id$ - packet id
			$name$ - packet name
			$fields$ - fields ctor definition (see <Field><Ctor/><Field> definition
			$parent$ - parent packet name if available
	-->
	<Ctor/>
	<!--
	Packet serializer definition
	Variables:
		$ns$ - namespace
		$id$ - packet id
		$name$ - packet name
		$parent$ - parent packet name
		$fields$ - field serialize definitions (see <Pack><serializer/></Pack>)
-->
	<Serializer>
		<![CDATA[
	function () {
		var buffer = new Buffer(this.Size());
		var offset = 0;
		var slen;
		buffer.writeUInt8($id$, offset);
		offset += 1;
		$fields$
		return buffer;
	};
]]>
	</Serializer>

	<!--
		Packet deserializer definition
		Variables:
			$ns$ - namespace
			$id$ - packet id
			$name$ - packet name
			$parent$ - parent packet name
			$fields$ - field deserialize definitions (see <Pack><deserialize/></Pack>)
	-->
	<Deserializer>
		<![CDATA[
	function (buffer) {
		var offset = 0;
		if ( buffer.readUInt8(offset) == $id$ ) {
			var slen;
			offset ++;
			$fields$
			return this;
		}
		return null;
	};
]]>
	</Deserializer>

	<!--
		Final namespace packet parser definition
		Variables:
			$ns$ - namespace
			$fields$ - parser field definitions (see <ParserCase/>)
	-->
	<Parser>
		<![CDATA[
$ns$.__types = {};
$fields$
$ns$.__getBinarySize = function(data) {
	if (null === data) {
		return 0;
	} else if ('string' == typeof data) {
		return Buffer.byteLength(data, 'utf8');
	} else if ('undefined' != typeof data.length) {
		return data.length;
	}
	return 0;
};
$ns$.decode = function(buffer) {
	var type = buffer.readInt8(0);
	if ('undefined' == typeof $ns$.__types[type]) throw Error('Unknown packet type: ' + type);
	return (new $ns$.__types[type]).decode(buffer);
}
]]>
	</Parser>

	<!--
		Namespace packet parser case
		Variables:
			$ns$ - namespace
			$id$ - packet id
			$name$ - packet name
			$parent$ - parent packet name
	-->
	<ParserCase>
		<![CDATA[
$ns$.__types[$id$] = $ns$.$name$;
]]>
	</ParserCase>

	<!--
		Field definition
		Attributes:
			type - destination field type int, numeric, string, binary
		Contains:
			format - definition of field in packet
			ctor - definition of field in ctor
			serialize - definition of field serialization
			deserialize - definition of field deserialization
			parser - parser case definition
			size - field size definition
		Variables:
			$ns$ - namespace
			$pack$ - packet name
			$id$ - packet id
			$name$ - field name
			$num$ - field number
			$parent$ - parent packet name
			$default$ - default value
			$size$ - size definition
	-->
	<Field type="int">
		<Format>
			<![CDATA[
	this.$name$ = $default$;
]]>
		</Format>
		<Serialize>
			<![CDATA[
		buffer.writeInt32LE(this.$name$, offset);
		offset += $size$;
]]>
		</Serialize>
		<Deserialize>
			<![CDATA[
			this.$name$ = buffer.readInt32LE(offset);
			offset += $size$;
]]>
		</Deserialize>
		<Size>4</Size>
		<Ctor/>
	</Field>

	<!--
		String sample
	-->
	<Field type="string">
		<Format>
			<![CDATA[
	this.$name$ = '$default$';
]]>
		</Format>
		<Serialize>
			<![CDATA[
		if (null !== this.$name$) {
			slen = buffer.write(this.$name$, offset+2);
		} else {
			slen = 0;
		}
		buffer.writeInt16LE(slen, offset);
		offset += slen + 2;
]]>
		</Serialize>
		<Deserialize>
			<![CDATA[
			slen = buffer.readInt16LE(offset);
			offset+=2;
			this.$name$ = buffer.toString('utf-8', offset, offset+slen);
			offset+=slen;
]]>
		</Deserialize>
		<Size>2+$ns$.__getBinarySize(this.$name$)</Size>
		<Ctor/>
	</Field>

	<!--
		Binary sample
	-->
	<Field type="binary">
		<Format>
			<![CDATA[
	this.$name$ = $default$;
]]>
		</Format>
		<Serialize>
			<![CDATA[
		slen = $ns$.__getBinarySize(this.$name$);
		buffer.writeInt32LE(slen, offset);
		offset += 4;
		if (slen) {
			this.$name$.copy(buffer, offset);
			offset += slen;
		}
]]>
		</Serialize>
		<Deserialize>
			<![CDATA[
			var blen = buffer.readInt32LE(offset);
			offset +=4;
			if (blen) {
				this.$name$ = buffer.slice(offset, blen);
				offset += blen;
			}
]]>
		</Deserialize>
		<Size>4+$ns$.__getBinarySize(this.$name$)</Size>
	</Field>
</snippets>
